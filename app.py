import streamlit as st
from docx import Document
from docx.shared import Pt
from io import BytesIO

st.set_page_config(page_title="MS WORD Format Checker")
st.title("ЁЯз╛ MS WORD Format Checker")
st.write("рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рд╡рд┐рд╡рд░рдг рднрд░реЗрдВ рдФрд░ .docx рдлрд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ:")

name = st.text_input("ЁЯСд рдЫрд╛рддреНрд░ рдХрд╛ рдирд╛рдо")
roll = st.text_input("ЁЯЖФ рд░реЛрд▓ рдирдВрдмрд░")
uploaded_file = st.file_uploader("рдЕрдкрдиреА Word рдлрд╝рд╛рдЗрд▓ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ (.docx)", type=["docx"])

def check_formatting(file):
    doc = Document(file)
    score = 0
    feedback = []
    section = doc.sections[0]

    # --- Q1 ---
    if round(section.page_width.inches, 1) == 11.7 and round(section.page_height.inches, 1) == 16.5:
        score += 2.5
        feedback.append("тЬЕ Q1(рдЕ): A3 рдкреЗрдЬ рд╕рд╛рдЗрдЬ рд╕реЗрдЯ рд╣реИ")
    else:
        feedback.append("тЭМ Q1(рдЕ): A3 рдкреЗрдЬ рд╕рд╛рдЗрдЬ рдирд╣реАрдВ рд╣реИ")

    if len(doc.paragraphs) > 1 and 'w:top' in doc.paragraphs[1]._element.xml:
        score += 2.5
        feedback.append("тЬЕ Q1(рдм): рджреВрд╕рд░реЗ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдореЗрдВ рдмреЙрд░реНрдбрд░ рд╣реИ")
    else:
        feedback.append("тЭМ Q1(рдм): рджреВрд╕рд░реЗ рдкреИрд░рд╛рдЧреНрд░рд╛рдл рдореЗрдВ рдмреЙрд░реНрдбрд░ рдирд╣реАрдВ рд╣реИ")

    if round(section.top_margin.inches, 1) == 0.6:
        score += 2.5
        feedback.append("тЬЕ Q1(рд╕): рдЯреЙрдк рдорд╛рд░реНрдЬрд┐рди 0.6 рдЗрдВрдЪ рд╣реИ")
    else:
        feedback.append("тЭМ Q1(рд╕): рдЯреЙрдк рдорд╛рд░реНрдЬрд┐рди 0.6 рдЗрдВрдЪ рдирд╣реАрдВ рд╣реИ")

    if len(doc.paragraphs) > 3:
        found = any("Define" in run.text and run.bold and run.font.highlight_color for run in doc.paragraphs[3].runs)
        if found:
            score += 2.5
            feedback.append("тЬЕ Q1(рдж): 'Define' рдмреЛрд▓реНрдб рдФрд░ рд╣рд╛рдИрд▓рд╛рдЗрдЯ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ")
        else:
            feedback.append("тЭМ Q1(рдж): 'Define' рдмреЛрд▓реНрдб рдФрд░ рд╣рд╛рдИрд▓рд╛рдЗрдЯ рдирд╣реАрдВ рд╣реИ")

    # --- Q2 ---
    feedback.append("тЪая╕П Q2(рдЕ): Watermark рдХреА рдЬрд╛рдВрдЪ рд╕рдВрднрд╡ рдирд╣реАрдВ")
    feedback.append("тЪая╕П Q2(рдм): Header Page No. рдХреА рдЬрд╛рдВрдЪ рд╕рдВрднрд╡ рдирд╣реАрдВ")

    if len(doc.paragraphs) > 1 and round(doc.paragraphs[1].paragraph_format.line_spacing or 0, 2) == 1.5:
        score += 2.5
        feedback.append("тЬЕ Q2(рд╕): рдкреИрд░рд╛рдЧреНрд░рд╛рдл 2 рдореЗрдВ рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ 1.5 рд╣реИ")
    else:
        feedback.append("тЭМ Q2(рд╕): рдкреИрд░рд╛рдЧреНрд░рд╛рдл 2 рдореЗрдВ рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ 1.5 рдирд╣реАрдВ рд╣реИ")

    found_raksha_font = any("рд░рдХреНрд╖рд╛" in run.text and run.font.name for p in doc.paragraphs for run in p.runs)
    if found_raksha_font:
        score += 2.5
        feedback.append("тЬЕ Q2(рдж): 'рд░рдХреНрд╖рд╛' рд╢рдмреНрдж рдХрд╛ рдлреЙрдиреНрдЯ рдмрджрд▓рд╛ рдЧрдпрд╛ рд╣реИ")
    else:
        feedback.append("тЭМ Q2(рдж): 'рд░рдХреНрд╖рд╛' рд╢рдмреНрдж рдХрд╛ рдлреЙрдиреНрдЯ рдирд╣реАрдВ рдмрджрд▓рд╛ рдЧрдпрд╛")

    # --- Q3 ---
    underline_removed = all("рд░рдХреНрд╖рд╛" not in run.text or not run.underline for p in doc.paragraphs for run in p.runs)
    if underline_removed:
        score += 2.5
        feedback.append("тЬЕ Q3(рдЕ): 'рд░рдХреНрд╖рд╛' рдХрд╛ рдЕрдВрдбрд░рд▓рд╛рдЗрди рд╣рдЯрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ")
    else:
        feedback.append("тЭМ Q3(рдЕ): 'рд░рдХреНрд╖рд╛' рдХрд╛ рдЕрдВрдбрд░рд▓рд╛рдЗрди рдЕрднреА рднреА рд╣реИ")

    if len(doc.paragraphs) > 0 and round(doc.paragraphs[0].paragraph_format.line_spacing or 0, 2) == 1.15:
        score += 2.5
        feedback.append("тЬЕ Q3(рдм): рдкреИрд░рд╛рдЧреНрд░рд╛рдл 1 рдореЗрдВ рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ 1.15 рд╣реИ")
    else:
        feedback.append("тЭМ Q3(рдм): рдкреИрд░рд╛рдЧреНрд░рд╛рдл 1 рдореЗрдВ рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ 1.15 рдирд╣реАрдВ рд╣реИ")

    if len(doc.paragraphs) > 2 and doc.paragraphs[2].style.name.lower().startswith("list"):
        score += 2.5
        feedback.append("тЬЕ Q3(рд╕): рдкреИрд░рд╛рдЧреНрд░рд╛рдл 3 рдмреБрд▓реЗрдЯ рд▓рд┐рд╕реНрдЯ рд╣реИ")
    else:
        feedback.append("тЭМ Q3(рд╕): рдкреИрд░рд╛рдЧреНрд░рд╛рдл 3 рдмреБрд▓реЗрдЯ рд▓рд┐рд╕реНрдЯ рдирд╣реАрдВ рд╣реИ")

    feedback.append("тЪая╕П Q3(рдж): рдЯреЗрдмрд▓ рдХреА рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ рдХреА рдЬрд╛рдВрдЪ рд╕рдВрднрд╡ рдирд╣реАрдВ")

    # --- Q4 ---
    found_orange = any(run.font.color and run.font.color.rgb and str(run.font.color.rgb) == 'FFA500' for p in doc.paragraphs for run in p.runs)
    if found_orange:
        score += 2.5
        feedback.append("тЬЕ Q4(рдЕ): рдСрд░реЗрдВрдЬ рдлреЙрдиреНрдЯ рдХрд▓рд░ рд╕реЗрдЯ рд╣реИ")
    else:
        feedback.append("тЭМ Q4(рдЕ): рдСрд░реЗрдВрдЬ рдлреЙрдиреНрдЯ рдХрд▓рд░ рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ")

    para = doc.paragraphs[0]
    if para.paragraph_format.line_spacing == Pt(12) and para.paragraph_format.space_after == Pt(18):
        score += 2.5
        feedback.append("тЬЕ Q4(рдм): рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ 12pt рдФрд░ рдЖрдлреНрдЯрд░ 18pt рд╣реИ")
    else:
        feedback.append("тЭМ Q4(рдм): рд▓рд╛рдЗрди рд╕реНрдкреЗрд╕рд┐рдВрдЧ рдпрд╛ рдЖрдлреНрдЯрд░ рд╕реНрдкреЗрд╕рд┐рдВрдЧ рд╕рд╣реА рдирд╣реАрдВ рд╣реИ")

    feedback.append("тЪая╕П Q4(рд╕): рд▓рд┐рдВрдХ рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ рдХреА рдЬрд╛рдВрдЪ рд╕рдВрднрд╡ рдирд╣реАрдВ")
    feedback.append("тЪая╕П Q4(рдж): рдкреЗрдЬ рдорд╛рд░реНрдЬрд┐рди рд╕рднреА рджрд┐рд╢рд╛рдУрдВ рдореЗрдВ '12' рдХреА рдЬрд╛рдВрдЪ рд╕реАрдорд┐рдд рд╣реИ")

    # --- Q5 ---
    tables = doc.tables
    if tables:
        aligned_right = all(cell.paragraphs[0].alignment == 2 for row in tables[0].rows for cell in row.cells if cell.paragraphs)
        if aligned_right:
            score += 2.5
            feedback.append("тЬЕ Q5(рдЕ): рд╕рд╛рд░рдгреА рдХрд╛ рдбреЗрдЯрд╛ рд░рд╛рдЗрдЯ рдЕрд▓рд╛рдЗрдиреНрдб рд╣реИ")
        else:
            feedback.append("тЭМ Q5(рдЕ): рд╕рд╛рд░рдгреА рдХрд╛ рдбреЗрдЯрд╛ рд░рд╛рдЗрдЯ рдЕрд▓рд╛рдЗрдиреНрдб рдирд╣реАрдВ рд╣реИ")
    else:
        feedback.append("тЭМ Q5(рдЕ): рдХреЛрдИ рд╕рд╛рд░рдгреА рдирд╣реАрдВ рдорд┐рд▓реА")

    feedback.append("тЪая╕П Q5(рдм): рд╢реИрдбреЛ рдЗрдлреЗрдХреНрдЯ рдХреА рдЬрд╛рдВрдЪ рд╕рдВрднрд╡ рдирд╣реАрдВ")
    feedback.append("тЪая╕П Q5(рд╕): рд╕реНрдХреЗрд▓рд┐рдВрдЧ рдЗрдлреЗрдХреНрдЯ рдХреА рдЬрд╛рдВрдЪ рд╕рдВрднрд╡ рдирд╣реАрдВ")

    return score, feedback

if uploaded_file and name and roll:
    score, results = check_formatting(BytesIO(uploaded_file.read()))
    st.success(f"ЁЯОп {name} (Roll: {roll}) тАУ Total Score: {score}/50")
    st.write("### ЁЯУЛ рдлреАрдбрдмреИрдХ:")
    for r in results:
        st.write(r)

    report = f"рдирд╛рдо: {name}\\nрд░реЛрд▓: {roll}\\nрдЕрдВрдХ: {score}/50\\n\\n" + "\\n".join(results)
    st.download_button("ЁЯУе рд░рд┐рдкреЛрд░реНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ", report, file_name=f"{roll}_report.txt", mime="text/plain")
elif uploaded_file and (not name or not roll):
    st.warning("рдХреГрдкрдпрд╛ рдирд╛рдо рдФрд░ рд░реЛрд▓ рдирдВрдмрд░ рднрд░реЗрдВ")
